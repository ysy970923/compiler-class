Terminals unused in grammar

    '/'
    '%'


State 24 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 ext_def_list

    3 ext_def_list: ext_def_list ext_def
    4             | %empty

    5 ext_def: type_specifier pointers ID ';'
    6        | type_specifier pointers ID '[' INTEGER_CONST ']' ';'
    7        | func_decl ';'
    8        | type_specifier ';'

    9 $@2: %empty

   10 ext_def: func_decl $@2 compound_stmt

   11 type_specifier: TYPE
   12               | VOID
   13               | struct_specifier

   14 @3: %empty

   15 @4: %empty

   16 struct_specifier: STRUCT ID '{' @3 def_list @4 '}'
   17                 | STRUCT ID

   18 func_decl: type_specifier pointers ID '(' ')'
   19          | type_specifier pointers ID '(' VOID ')'

   20 @5: %empty

   21 func_decl: type_specifier pointers ID '(' @5 param_list ')'

   22 pointers: '*'
   23         | %empty

   24 param_list: param_decl
   25           | param_list ',' param_decl

   26 param_decl: type_specifier pointers ID
   27           | type_specifier pointers ID '[' INTEGER_CONST ']'

   28 def_list: def_list def
   29         | %empty

   30 def: type_specifier pointers ID ';'
   31    | type_specifier pointers ID '[' INTEGER_CONST ']' ';'
   32    | type_specifier ';'
   33    | func_decl ';'

   34 $@6: %empty

   35 compound_stmt: '{' local_defs $@6 stmt_list '}'

   36 local_defs: def_list

   37 stmt_list: stmt_list stmt
   38          | %empty

   39 stmt: expr ';'
   40     | compound_stmt
   41     | RETURN ';'

   42 $@7: %empty

   43 stmt: RETURN $@7 expr ';'
   44     | ';'
   45     | if_stmt

   46 $@8: %empty

   47 stmt: if_stmt ELSE $@8 stmt

   48 @9: %empty

   49 $@10: %empty

   50 stmt: WHILE @9 '(' expr ')' $@10 stmt

   51 $@11: %empty

   52 @12: %empty

   53 $@13: %empty

   54 $@14: %empty

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt
   56     | BREAK ';'
   57     | CONTINUE ';'
   58     | WRITE_INT '(' unary ')' ';'
   59     | WRITE_STRING '(' STRING ')' ';'

   60 @15: %empty

   61 $@16: %empty

   62 if_stmt: IF @15 '(' expr ')' $@16 stmt

   63 expr_e: expr
   64       | %empty

   65 $@17: %empty

   66 expr: unary $@17 '=' expr
   67     | or_expr

   68 or_expr: or_list

   69 or_list: or_list LOGICAL_OR and_expr
   70        | and_expr

   71 and_expr: and_list

   72 and_list: and_list LOGICAL_AND binary
   73         | binary

   74 binary: binary RELOP binary
   75       | binary EQUOP binary
   76       | binary '+' binary
   77       | binary '-' binary
   78       | unary

   79 unary: '(' expr ')'
   80      | '(' unary ')'
   81      | INTEGER_CONST
   82      | CHAR_CONST
   83      | STRING
   84      | ID
   85      | NULL_
   86      | '-' unary
   87      | '!' unary
   88      | unary INCOP
   89      | unary DECOP
   90      | INCOP unary
   91      | DECOP unary
   92      | '&' unary
   93      | '*' unary
   94      | unary '[' expr ']'
   95      | unary '.' ID
   96      | unary STRUCTOP ID

   97 @18: %empty

   98 unary: unary '(' @18 args ')'
   99      | unary '(' ')'

  100 args: expr
  101     | args ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 87
    '%' (37)
    '&' (38) 92
    '(' (40) 18 19 21 50 55 58 59 62 79 80 98 99
    ')' (41) 18 19 21 50 55 58 59 62 79 80 98 99
    '*' (42) 22 93
    '+' (43) 76
    ',' (44) 25 101
    '-' (45) 77 86
    '.' (46) 95
    '/' (47)
    ';' (59) 5 6 7 8 30 31 32 33 39 41 43 44 55 56 57 58 59
    '=' (61) 66
    '[' (91) 6 27 31 94
    ']' (93) 6 27 31 94
    '{' (123) 16 35
    '}' (125) 16 35
    error (256)
    IFX (258)
    ELSE <idptr> (259) 47
    LOGICAL_OR <idptr> (260) 69
    LOGICAL_AND <idptr> (261) 72
    EQUOP <idptr> (262) 75
    RELOP <idptr> (263) 74
    INCOP <idptr> (264) 88 90
    DECOP <idptr> (265) 89 91
    STRUCTOP <idptr> (266) 96
    WRITE_INT (267) 58
    WRITE_STRING (268) 59
    ID <idptr> (269) 5 6 16 17 18 19 21 26 27 30 31 84 95 96
    TYPE <idptr> (270) 11
    VOID <idptr> (271) 12 19
    NULL_ <idptr> (272) 85
    STRUCT <idptr> (273) 16 17
    RETURN <idptr> (274) 41 43
    IF <idptr> (275) 62
    WHILE <idptr> (276) 50
    FOR <idptr> (277) 55
    BREAK <idptr> (278) 56
    CONTINUE <idptr> (279) 57
    STRING <stringVal> (280) 59 83
    INTEGER_CONST <intVal> (281) 6 27 31 81
    CHAR_CONST <charVal> (282) 82


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 2
        on right: 0
    $@1 (47)
        on left: 1
        on right: 2
    ext_def_list <intVal> (48)
        on left: 3 4
        on right: 2 3
    ext_def <intVal> (49)
        on left: 5 6 7 8 10
        on right: 3
    $@2 (50)
        on left: 9
        on right: 10
    type_specifier <declptr> (51)
        on left: 11 12 13
        on right: 5 6 8 18 19 21 26 27 30 31 32
    struct_specifier <declptr> (52)
        on left: 16 17
        on right: 13
    @3 (53)
        on left: 14
        on right: 16
    @4 (54)
        on left: 15
        on right: 16
    func_decl <declptr> (55)
        on left: 18 19 21
        on right: 7 10 33
    @5 (56)
        on left: 20
        on right: 21
    pointers <boolVal> (57)
        on left: 22 23
        on right: 5 6 18 19 21 26 27 30 31
    param_list (58)
        on left: 24 25
        on right: 21 25
    param_decl (59)
        on left: 26 27
        on right: 24 25
    def_list <intVal> (60)
        on left: 28 29
        on right: 16 28 36
    def <intVal> (61)
        on left: 30 31 32 33
        on right: 28
    compound_stmt (62)
        on left: 35
        on right: 10 40
    $@6 (63)
        on left: 34
        on right: 35
    local_defs <intVal> (64)
        on left: 36
        on right: 35
    stmt_list (65)
        on left: 37 38
        on right: 35 37
    stmt (66)
        on left: 39 40 41 43 44 45 47 50 55 56 57 58 59
        on right: 37 47 50 55 62
    $@7 (67)
        on left: 42
        on right: 43
    $@8 (68)
        on left: 46
        on right: 47
    @9 (69)
        on left: 48
        on right: 50
    $@10 (70)
        on left: 49
        on right: 50
    $@11 (71)
        on left: 51
        on right: 55
    @12 (72)
        on left: 52
        on right: 55
    $@13 (73)
        on left: 53
        on right: 55
    $@14 (74)
        on left: 54
        on right: 55
    if_stmt <intVal> (75)
        on left: 62
        on right: 45 47
    @15 (76)
        on left: 60
        on right: 62
    $@16 (77)
        on left: 61
        on right: 62
    expr_e (78)
        on left: 63 64
        on right: 55
    expr <declptr> (79)
        on left: 66 67
        on right: 39 43 50 62 63 66 79 94 100 101
    $@17 (80)
        on left: 65
        on right: 66
    or_expr <declptr> (81)
        on left: 68
        on right: 67
    or_list <declptr> (82)
        on left: 69 70
        on right: 68 69
    and_expr <declptr> (83)
        on left: 71
        on right: 69 70
    and_list <declptr> (84)
        on left: 72 73
        on right: 71 72
    binary <declptr> (85)
        on left: 74 75 76 77 78
        on right: 72 73 74 75 76 77
    unary <declptr> (86)
        on left: 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 98 99
        on right: 58 66 78 80 86 87 88 89 90 91 92 93 94 95 96 98 99
    @18 (87)
        on left: 97
        on right: 98
    args <declptr> (88)
        on left: 100 101
        on right: 98 101


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . ext_def_list

    $default  reduce using rule 4 (ext_def_list)

    ext_def_list  go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 ext_def_list .
    3 ext_def_list: ext_def_list . ext_def

    TYPE    shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 2 (program)

    ext_def           go to state 8
    type_specifier    go to state 9
    struct_specifier  go to state 10
    func_decl         go to state 11


State 5

   11 type_specifier: TYPE .

    $default  reduce using rule 11 (type_specifier)


State 6

   12 type_specifier: VOID .

    $default  reduce using rule 12 (type_specifier)


State 7

   16 struct_specifier: STRUCT . ID '{' @3 def_list @4 '}'
   17                 | STRUCT . ID

    ID  shift, and go to state 12


State 8

    3 ext_def_list: ext_def_list ext_def .

    $default  reduce using rule 3 (ext_def_list)


State 9

    5 ext_def: type_specifier . pointers ID ';'
    6        | type_specifier . pointers ID '[' INTEGER_CONST ']' ';'
    8        | type_specifier . ';'
   18 func_decl: type_specifier . pointers ID '(' ')'
   19          | type_specifier . pointers ID '(' VOID ')'
   21          | type_specifier . pointers ID '(' @5 param_list ')'

    '*'  shift, and go to state 13
    ';'  shift, and go to state 14

    $default  reduce using rule 23 (pointers)

    pointers  go to state 15


State 10

   13 type_specifier: struct_specifier .

    $default  reduce using rule 13 (type_specifier)


State 11

    7 ext_def: func_decl . ';'
   10        | func_decl . $@2 compound_stmt

    ';'  shift, and go to state 16

    $default  reduce using rule 9 ($@2)

    $@2  go to state 17


State 12

   16 struct_specifier: STRUCT ID . '{' @3 def_list @4 '}'
   17                 | STRUCT ID .

    '{'  shift, and go to state 18

    $default  reduce using rule 17 (struct_specifier)


State 13

   22 pointers: '*' .

    $default  reduce using rule 22 (pointers)


State 14

    8 ext_def: type_specifier ';' .

    $default  reduce using rule 8 (ext_def)


State 15

    5 ext_def: type_specifier pointers . ID ';'
    6        | type_specifier pointers . ID '[' INTEGER_CONST ']' ';'
   18 func_decl: type_specifier pointers . ID '(' ')'
   19          | type_specifier pointers . ID '(' VOID ')'
   21          | type_specifier pointers . ID '(' @5 param_list ')'

    ID  shift, and go to state 19


State 16

    7 ext_def: func_decl ';' .

    $default  reduce using rule 7 (ext_def)


State 17

   10 ext_def: func_decl $@2 . compound_stmt

    '{'  shift, and go to state 20

    compound_stmt  go to state 21


State 18

   16 struct_specifier: STRUCT ID '{' . @3 def_list @4 '}'

    $default  reduce using rule 14 (@3)

    @3  go to state 22


State 19

    5 ext_def: type_specifier pointers ID . ';'
    6        | type_specifier pointers ID . '[' INTEGER_CONST ']' ';'
   18 func_decl: type_specifier pointers ID . '(' ')'
   19          | type_specifier pointers ID . '(' VOID ')'
   21          | type_specifier pointers ID . '(' @5 param_list ')'

    '['  shift, and go to state 23
    '('  shift, and go to state 24
    ';'  shift, and go to state 25


State 20

   35 compound_stmt: '{' . local_defs $@6 stmt_list '}'

    $default  reduce using rule 29 (def_list)

    def_list    go to state 26
    local_defs  go to state 27


State 21

   10 ext_def: func_decl $@2 compound_stmt .

    $default  reduce using rule 10 (ext_def)


State 22

   16 struct_specifier: STRUCT ID '{' @3 . def_list @4 '}'

    $default  reduce using rule 29 (def_list)

    def_list  go to state 28


State 23

    6 ext_def: type_specifier pointers ID '[' . INTEGER_CONST ']' ';'

    INTEGER_CONST  shift, and go to state 29


State 24

   18 func_decl: type_specifier pointers ID '(' . ')'
   19          | type_specifier pointers ID '(' . VOID ')'
   21          | type_specifier pointers ID '(' . @5 param_list ')'

    ')'   shift, and go to state 30
    VOID  shift, and go to state 31

    VOID      [reduce using rule 20 (@5)]
    $default  reduce using rule 20 (@5)

    @5  go to state 32


State 25

    5 ext_def: type_specifier pointers ID ';' .

    $default  reduce using rule 5 (ext_def)


State 26

   28 def_list: def_list . def
   36 local_defs: def_list .

    TYPE    shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 36 (local_defs)

    type_specifier    go to state 33
    struct_specifier  go to state 10
    func_decl         go to state 34
    def               go to state 35


State 27

   35 compound_stmt: '{' local_defs . $@6 stmt_list '}'

    $default  reduce using rule 34 ($@6)

    $@6  go to state 36


State 28

   16 struct_specifier: STRUCT ID '{' @3 def_list . @4 '}'
   28 def_list: def_list . def

    TYPE    shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 15 (@4)

    type_specifier    go to state 33
    struct_specifier  go to state 10
    @4                go to state 37
    func_decl         go to state 34
    def               go to state 35


State 29

    6 ext_def: type_specifier pointers ID '[' INTEGER_CONST . ']' ';'

    ']'  shift, and go to state 38


State 30

   18 func_decl: type_specifier pointers ID '(' ')' .

    $default  reduce using rule 18 (func_decl)


State 31

   19 func_decl: type_specifier pointers ID '(' VOID . ')'

    ')'  shift, and go to state 39


State 32

   21 func_decl: type_specifier pointers ID '(' @5 . param_list ')'

    TYPE    shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    type_specifier    go to state 40
    struct_specifier  go to state 10
    param_list        go to state 41
    param_decl        go to state 42


State 33

   18 func_decl: type_specifier . pointers ID '(' ')'
   19          | type_specifier . pointers ID '(' VOID ')'
   21          | type_specifier . pointers ID '(' @5 param_list ')'
   30 def: type_specifier . pointers ID ';'
   31    | type_specifier . pointers ID '[' INTEGER_CONST ']' ';'
   32    | type_specifier . ';'

    '*'  shift, and go to state 13
    ';'  shift, and go to state 43

    $default  reduce using rule 23 (pointers)

    pointers  go to state 44


State 34

   33 def: func_decl . ';'

    ';'  shift, and go to state 45


State 35

   28 def_list: def_list def .

    $default  reduce using rule 28 (def_list)


State 36

   35 compound_stmt: '{' local_defs $@6 . stmt_list '}'

    $default  reduce using rule 38 (stmt_list)

    stmt_list  go to state 46


State 37

   16 struct_specifier: STRUCT ID '{' @3 def_list @4 . '}'

    '}'  shift, and go to state 47


State 38

    6 ext_def: type_specifier pointers ID '[' INTEGER_CONST ']' . ';'

    ';'  shift, and go to state 48


State 39

   19 func_decl: type_specifier pointers ID '(' VOID ')' .

    $default  reduce using rule 19 (func_decl)


State 40

   26 param_decl: type_specifier . pointers ID
   27           | type_specifier . pointers ID '[' INTEGER_CONST ']'

    '*'  shift, and go to state 13

    $default  reduce using rule 23 (pointers)

    pointers  go to state 49


State 41

   21 func_decl: type_specifier pointers ID '(' @5 param_list . ')'
   25 param_list: param_list . ',' param_decl

    ','  shift, and go to state 50
    ')'  shift, and go to state 51


State 42

   24 param_list: param_decl .

    $default  reduce using rule 24 (param_list)


State 43

   32 def: type_specifier ';' .

    $default  reduce using rule 32 (def)


State 44

   18 func_decl: type_specifier pointers . ID '(' ')'
   19          | type_specifier pointers . ID '(' VOID ')'
   21          | type_specifier pointers . ID '(' @5 param_list ')'
   30 def: type_specifier pointers . ID ';'
   31    | type_specifier pointers . ID '[' INTEGER_CONST ']' ';'

    ID  shift, and go to state 52


State 45

   33 def: func_decl ';' .

    $default  reduce using rule 33 (def)


State 46

   35 compound_stmt: '{' local_defs $@6 stmt_list . '}'
   37 stmt_list: stmt_list . stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    WRITE_INT      shift, and go to state 60
    WRITE_STRING   shift, and go to state 61
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    RETURN         shift, and go to state 64
    IF             shift, and go to state 65
    WHILE          shift, and go to state 66
    FOR            shift, and go to state 67
    BREAK          shift, and go to state 68
    CONTINUE       shift, and go to state 69
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72
    ';'            shift, and go to state 73
    '{'            shift, and go to state 20
    '}'            shift, and go to state 74

    compound_stmt  go to state 75
    stmt           go to state 76
    if_stmt        go to state 77
    expr           go to state 78
    or_expr        go to state 79
    or_list        go to state 80
    and_expr       go to state 81
    and_list       go to state 82
    binary         go to state 83
    unary          go to state 84


State 47

   16 struct_specifier: STRUCT ID '{' @3 def_list @4 '}' .

    $default  reduce using rule 16 (struct_specifier)


State 48

    6 ext_def: type_specifier pointers ID '[' INTEGER_CONST ']' ';' .

    $default  reduce using rule 6 (ext_def)


State 49

   26 param_decl: type_specifier pointers . ID
   27           | type_specifier pointers . ID '[' INTEGER_CONST ']'

    ID  shift, and go to state 85


State 50

   25 param_list: param_list ',' . param_decl

    TYPE    shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    type_specifier    go to state 40
    struct_specifier  go to state 10
    param_decl        go to state 86


State 51

   21 func_decl: type_specifier pointers ID '(' @5 param_list ')' .

    $default  reduce using rule 21 (func_decl)


State 52

   18 func_decl: type_specifier pointers ID . '(' ')'
   19          | type_specifier pointers ID . '(' VOID ')'
   21          | type_specifier pointers ID . '(' @5 param_list ')'
   30 def: type_specifier pointers ID . ';'
   31    | type_specifier pointers ID . '[' INTEGER_CONST ']' ';'

    '['  shift, and go to state 87
    '('  shift, and go to state 24
    ';'  shift, and go to state 88


State 53

   92 unary: '&' . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 89


State 54

   86 unary: '-' . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 90


State 55

   93 unary: '*' . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 91


State 56

   87 unary: '!' . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 92


State 57

   90 unary: INCOP . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 93


State 58

   91 unary: DECOP . unary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 94


State 59

   79 unary: '(' . expr ')'
   80      | '(' . unary ')'

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 95
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 96


State 60

   58 stmt: WRITE_INT . '(' unary ')' ';'

    '('  shift, and go to state 97


State 61

   59 stmt: WRITE_STRING . '(' STRING ')' ';'

    '('  shift, and go to state 98


State 62

   84 unary: ID .

    $default  reduce using rule 84 (unary)


State 63

   85 unary: NULL_ .

    $default  reduce using rule 85 (unary)


State 64

   41 stmt: RETURN . ';'
   43     | RETURN . $@7 expr ';'

    ';'  shift, and go to state 99

    $default  reduce using rule 42 ($@7)

    $@7  go to state 100


State 65

   62 if_stmt: IF . @15 '(' expr ')' $@16 stmt

    $default  reduce using rule 60 (@15)

    @15  go to state 101


State 66

   50 stmt: WHILE . @9 '(' expr ')' $@10 stmt

    $default  reduce using rule 48 (@9)

    @9  go to state 102


State 67

   55 stmt: FOR . $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt

    $default  reduce using rule 51 ($@11)

    $@11  go to state 103


State 68

   56 stmt: BREAK . ';'

    ';'  shift, and go to state 104


State 69

   57 stmt: CONTINUE . ';'

    ';'  shift, and go to state 105


State 70

   83 unary: STRING .

    $default  reduce using rule 83 (unary)


State 71

   81 unary: INTEGER_CONST .

    $default  reduce using rule 81 (unary)


State 72

   82 unary: CHAR_CONST .

    $default  reduce using rule 82 (unary)


State 73

   44 stmt: ';' .

    $default  reduce using rule 44 (stmt)


State 74

   35 compound_stmt: '{' local_defs $@6 stmt_list '}' .

    $default  reduce using rule 35 (compound_stmt)


State 75

   40 stmt: compound_stmt .

    $default  reduce using rule 40 (stmt)


State 76

   37 stmt_list: stmt_list stmt .

    $default  reduce using rule 37 (stmt_list)


State 77

   45 stmt: if_stmt .
   47     | if_stmt . ELSE $@8 stmt

    ELSE  shift, and go to state 106

    $default  reduce using rule 45 (stmt)


State 78

   39 stmt: expr . ';'

    ';'  shift, and go to state 107


State 79

   67 expr: or_expr .

    $default  reduce using rule 67 (expr)


State 80

   68 or_expr: or_list .
   69 or_list: or_list . LOGICAL_OR and_expr

    LOGICAL_OR  shift, and go to state 108

    $default  reduce using rule 68 (or_expr)


State 81

   70 or_list: and_expr .

    $default  reduce using rule 70 (or_list)


State 82

   71 and_expr: and_list .
   72 and_list: and_list . LOGICAL_AND binary

    LOGICAL_AND  shift, and go to state 109

    $default  reduce using rule 71 (and_expr)


State 83

   73 and_list: binary .
   74 binary: binary . RELOP binary
   75       | binary . EQUOP binary
   76       | binary . '+' binary
   77       | binary . '-' binary

    EQUOP  shift, and go to state 110
    RELOP  shift, and go to state 111
    '+'    shift, and go to state 112
    '-'    shift, and go to state 113

    $default  reduce using rule 73 (and_list)


State 84

   66 expr: unary . $@17 '=' expr
   78 binary: unary .
   88 unary: unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    '='       reduce using rule 65 ($@17)
    $default  reduce using rule 78 (binary)

    $@17  go to state 120


State 85

   26 param_decl: type_specifier pointers ID .
   27           | type_specifier pointers ID . '[' INTEGER_CONST ']'

    '['  shift, and go to state 121

    $default  reduce using rule 26 (param_decl)


State 86

   25 param_list: param_list ',' param_decl .

    $default  reduce using rule 25 (param_list)


State 87

   31 def: type_specifier pointers ID '[' . INTEGER_CONST ']' ';'

    INTEGER_CONST  shift, and go to state 122


State 88

   30 def: type_specifier pointers ID ';' .

    $default  reduce using rule 30 (def)


State 89

   88 unary: unary . INCOP
   89      | unary . DECOP
   92      | '&' unary .
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 92 (unary)


State 90

   86 unary: '-' unary .
   88      | unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 86 (unary)


State 91

   88 unary: unary . INCOP
   89      | unary . DECOP
   93      | '*' unary .
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 93 (unary)


State 92

   87 unary: '!' unary .
   88      | unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 87 (unary)


State 93

   88 unary: unary . INCOP
   89      | unary . DECOP
   90      | INCOP unary .
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 90 (unary)


State 94

   88 unary: unary . INCOP
   89      | unary . DECOP
   91      | DECOP unary .
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 91 (unary)


State 95

   79 unary: '(' expr . ')'

    ')'  shift, and go to state 123


State 96

   66 expr: unary . $@17 '=' expr
   78 binary: unary .
   80 unary: '(' unary . ')'
   88      | unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    ')'       shift, and go to state 124
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    '='       reduce using rule 65 ($@17)
    $default  reduce using rule 78 (binary)

    $@17  go to state 120


State 97

   58 stmt: WRITE_INT '(' . unary ')' ';'

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    unary  go to state 125


State 98

   59 stmt: WRITE_STRING '(' . STRING ')' ';'

    STRING  shift, and go to state 126


State 99

   41 stmt: RETURN ';' .

    $default  reduce using rule 41 (stmt)


State 100

   43 stmt: RETURN $@7 . expr ';'

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 127
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 101

   62 if_stmt: IF @15 . '(' expr ')' $@16 stmt

    '('  shift, and go to state 128


State 102

   50 stmt: WHILE @9 . '(' expr ')' $@10 stmt

    '('  shift, and go to state 129


State 103

   55 stmt: FOR $@11 . '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt

    '('  shift, and go to state 130


State 104

   56 stmt: BREAK ';' .

    $default  reduce using rule 56 (stmt)


State 105

   57 stmt: CONTINUE ';' .

    $default  reduce using rule 57 (stmt)


State 106

   47 stmt: if_stmt ELSE . $@8 stmt

    $default  reduce using rule 46 ($@8)

    $@8  go to state 131


State 107

   39 stmt: expr ';' .

    $default  reduce using rule 39 (stmt)


State 108

   69 or_list: or_list LOGICAL_OR . and_expr

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    and_expr  go to state 132
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 133


State 109

   72 and_list: and_list LOGICAL_AND . binary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    binary  go to state 134
    unary   go to state 133


State 110

   75 binary: binary EQUOP . binary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    binary  go to state 135
    unary   go to state 133


State 111

   74 binary: binary RELOP . binary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    binary  go to state 136
    unary   go to state 133


State 112

   76 binary: binary '+' . binary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    binary  go to state 137
    unary   go to state 133


State 113

   77 binary: binary '-' . binary

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    binary  go to state 138
    unary   go to state 133


State 114

   88 unary: unary INCOP .

    $default  reduce using rule 88 (unary)


State 115

   89 unary: unary DECOP .

    $default  reduce using rule 89 (unary)


State 116

   94 unary: unary '[' . expr ']'

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 139
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 117

   98 unary: unary '(' . @18 args ')'
   99      | unary '(' . ')'

    ')'  shift, and go to state 140

    $default  reduce using rule 97 (@18)

    @18  go to state 141


State 118

   95 unary: unary '.' . ID

    ID  shift, and go to state 142


State 119

   96 unary: unary STRUCTOP . ID

    ID  shift, and go to state 143


State 120

   66 expr: unary $@17 . '=' expr

    '='  shift, and go to state 144


State 121

   27 param_decl: type_specifier pointers ID '[' . INTEGER_CONST ']'

    INTEGER_CONST  shift, and go to state 145


State 122

   31 def: type_specifier pointers ID '[' INTEGER_CONST . ']' ';'

    ']'  shift, and go to state 146


State 123

   79 unary: '(' expr ')' .

    $default  reduce using rule 79 (unary)


State 124

   80 unary: '(' unary ')' .

    $default  reduce using rule 80 (unary)


State 125

   58 stmt: WRITE_INT '(' unary . ')' ';'
   88 unary: unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    ')'       shift, and go to state 147
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119


State 126

   59 stmt: WRITE_STRING '(' STRING . ')' ';'

    ')'  shift, and go to state 148


State 127

   43 stmt: RETURN $@7 expr . ';'

    ';'  shift, and go to state 149


State 128

   62 if_stmt: IF @15 '(' . expr ')' $@16 stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 150
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 129

   50 stmt: WHILE @9 '(' . expr ')' $@10 stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 151
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 130

   55 stmt: FOR $@11 '(' . expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    $default  reduce using rule 64 (expr_e)

    expr_e    go to state 152
    expr      go to state 153
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 131

   47 stmt: if_stmt ELSE $@8 . stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    WRITE_INT      shift, and go to state 60
    WRITE_STRING   shift, and go to state 61
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    RETURN         shift, and go to state 64
    IF             shift, and go to state 65
    WHILE          shift, and go to state 66
    FOR            shift, and go to state 67
    BREAK          shift, and go to state 68
    CONTINUE       shift, and go to state 69
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72
    ';'            shift, and go to state 73
    '{'            shift, and go to state 20

    compound_stmt  go to state 75
    stmt           go to state 154
    if_stmt        go to state 77
    expr           go to state 78
    or_expr        go to state 79
    or_list        go to state 80
    and_expr       go to state 81
    and_list       go to state 82
    binary         go to state 83
    unary          go to state 84


State 132

   69 or_list: or_list LOGICAL_OR and_expr .

    $default  reduce using rule 69 (or_list)


State 133

   78 binary: unary .
   88 unary: unary . INCOP
   89      | unary . DECOP
   94      | unary . '[' expr ']'
   95      | unary . '.' ID
   96      | unary . STRUCTOP ID
   98      | unary . '(' @18 args ')'
   99      | unary . '(' ')'

    INCOP     shift, and go to state 114
    DECOP     shift, and go to state 115
    '['       shift, and go to state 116
    '('       shift, and go to state 117
    '.'       shift, and go to state 118
    STRUCTOP  shift, and go to state 119

    $default  reduce using rule 78 (binary)


State 134

   72 and_list: and_list LOGICAL_AND binary .
   74 binary: binary . RELOP binary
   75       | binary . EQUOP binary
   76       | binary . '+' binary
   77       | binary . '-' binary

    EQUOP  shift, and go to state 110
    RELOP  shift, and go to state 111
    '+'    shift, and go to state 112
    '-'    shift, and go to state 113

    $default  reduce using rule 72 (and_list)


State 135

   74 binary: binary . RELOP binary
   75       | binary . EQUOP binary
   75       | binary EQUOP binary .
   76       | binary . '+' binary
   77       | binary . '-' binary

    RELOP  shift, and go to state 111
    '+'    shift, and go to state 112
    '-'    shift, and go to state 113

    $default  reduce using rule 75 (binary)


State 136

   74 binary: binary . RELOP binary
   74       | binary RELOP binary .
   75       | binary . EQUOP binary
   76       | binary . '+' binary
   77       | binary . '-' binary

    '+'  shift, and go to state 112
    '-'  shift, and go to state 113

    $default  reduce using rule 74 (binary)


State 137

   74 binary: binary . RELOP binary
   75       | binary . EQUOP binary
   76       | binary . '+' binary
   76       | binary '+' binary .
   77       | binary . '-' binary

    $default  reduce using rule 76 (binary)


State 138

   74 binary: binary . RELOP binary
   75       | binary . EQUOP binary
   76       | binary . '+' binary
   77       | binary . '-' binary
   77       | binary '-' binary .

    $default  reduce using rule 77 (binary)


State 139

   94 unary: unary '[' expr . ']'

    ']'  shift, and go to state 155


State 140

   99 unary: unary '(' ')' .

    $default  reduce using rule 99 (unary)


State 141

   98 unary: unary '(' @18 . args ')'

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 156
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84
    args      go to state 157


State 142

   95 unary: unary '.' ID .

    $default  reduce using rule 95 (unary)


State 143

   96 unary: unary STRUCTOP ID .

    $default  reduce using rule 96 (unary)


State 144

   66 expr: unary $@17 '=' . expr

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 158
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 145

   27 param_decl: type_specifier pointers ID '[' INTEGER_CONST . ']'

    ']'  shift, and go to state 159


State 146

   31 def: type_specifier pointers ID '[' INTEGER_CONST ']' . ';'

    ';'  shift, and go to state 160


State 147

   58 stmt: WRITE_INT '(' unary ')' . ';'

    ';'  shift, and go to state 161


State 148

   59 stmt: WRITE_STRING '(' STRING ')' . ';'

    ';'  shift, and go to state 162


State 149

   43 stmt: RETURN $@7 expr ';' .

    $default  reduce using rule 43 (stmt)


State 150

   62 if_stmt: IF @15 '(' expr . ')' $@16 stmt

    ')'  shift, and go to state 163


State 151

   50 stmt: WHILE @9 '(' expr . ')' $@10 stmt

    ')'  shift, and go to state 164


State 152

   55 stmt: FOR $@11 '(' expr_e . ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt

    ';'  shift, and go to state 165


State 153

   63 expr_e: expr .

    $default  reduce using rule 63 (expr_e)


State 154

   47 stmt: if_stmt ELSE $@8 stmt .

    $default  reduce using rule 47 (stmt)


State 155

   94 unary: unary '[' expr ']' .

    $default  reduce using rule 94 (unary)


State 156

  100 args: expr .

    $default  reduce using rule 100 (args)


State 157

   98 unary: unary '(' @18 args . ')'
  101 args: args . ',' expr

    ','  shift, and go to state 166
    ')'  shift, and go to state 167


State 158

   66 expr: unary $@17 '=' expr .

    $default  reduce using rule 66 (expr)


State 159

   27 param_decl: type_specifier pointers ID '[' INTEGER_CONST ']' .

    $default  reduce using rule 27 (param_decl)


State 160

   31 def: type_specifier pointers ID '[' INTEGER_CONST ']' ';' .

    $default  reduce using rule 31 (def)


State 161

   58 stmt: WRITE_INT '(' unary ')' ';' .

    $default  reduce using rule 58 (stmt)


State 162

   59 stmt: WRITE_STRING '(' STRING ')' ';' .

    $default  reduce using rule 59 (stmt)


State 163

   62 if_stmt: IF @15 '(' expr ')' . $@16 stmt

    $default  reduce using rule 61 ($@16)

    $@16  go to state 168


State 164

   50 stmt: WHILE @9 '(' expr ')' . $@10 stmt

    $default  reduce using rule 49 ($@10)

    $@10  go to state 169


State 165

   55 stmt: FOR $@11 '(' expr_e ';' . @12 expr_e ';' $@13 expr_e ')' $@14 stmt

    $default  reduce using rule 52 (@12)

    @12  go to state 170


State 166

  101 args: args ',' . expr

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    expr      go to state 171
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 167

   98 unary: unary '(' @18 args ')' .

    $default  reduce using rule 98 (unary)


State 168

   62 if_stmt: IF @15 '(' expr ')' $@16 . stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    WRITE_INT      shift, and go to state 60
    WRITE_STRING   shift, and go to state 61
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    RETURN         shift, and go to state 64
    IF             shift, and go to state 65
    WHILE          shift, and go to state 66
    FOR            shift, and go to state 67
    BREAK          shift, and go to state 68
    CONTINUE       shift, and go to state 69
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72
    ';'            shift, and go to state 73
    '{'            shift, and go to state 20

    compound_stmt  go to state 75
    stmt           go to state 172
    if_stmt        go to state 77
    expr           go to state 78
    or_expr        go to state 79
    or_list        go to state 80
    and_expr       go to state 81
    and_list       go to state 82
    binary         go to state 83
    unary          go to state 84


State 169

   50 stmt: WHILE @9 '(' expr ')' $@10 . stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    WRITE_INT      shift, and go to state 60
    WRITE_STRING   shift, and go to state 61
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    RETURN         shift, and go to state 64
    IF             shift, and go to state 65
    WHILE          shift, and go to state 66
    FOR            shift, and go to state 67
    BREAK          shift, and go to state 68
    CONTINUE       shift, and go to state 69
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72
    ';'            shift, and go to state 73
    '{'            shift, and go to state 20

    compound_stmt  go to state 75
    stmt           go to state 173
    if_stmt        go to state 77
    expr           go to state 78
    or_expr        go to state 79
    or_list        go to state 80
    and_expr       go to state 81
    and_list       go to state 82
    binary         go to state 83
    unary          go to state 84


State 170

   55 stmt: FOR $@11 '(' expr_e ';' @12 . expr_e ';' $@13 expr_e ')' $@14 stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    $default  reduce using rule 64 (expr_e)

    expr_e    go to state 174
    expr      go to state 153
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 171

  101 args: args ',' expr .

    $default  reduce using rule 101 (args)


State 172

   62 if_stmt: IF @15 '(' expr ')' $@16 stmt .

    $default  reduce using rule 62 (if_stmt)


State 173

   50 stmt: WHILE @9 '(' expr ')' $@10 stmt .

    $default  reduce using rule 50 (stmt)


State 174

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e . ';' $@13 expr_e ')' $@14 stmt

    ';'  shift, and go to state 175


State 175

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' . $@13 expr_e ')' $@14 stmt

    $default  reduce using rule 53 ($@13)

    $@13  go to state 176


State 176

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 . expr_e ')' $@14 stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72

    $default  reduce using rule 64 (expr_e)

    expr_e    go to state 177
    expr      go to state 153
    or_expr   go to state 79
    or_list   go to state 80
    and_expr  go to state 81
    and_list  go to state 82
    binary    go to state 83
    unary     go to state 84


State 177

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e . ')' $@14 stmt

    ')'  shift, and go to state 178


State 178

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' . $@14 stmt

    $default  reduce using rule 54 ($@14)

    $@14  go to state 179


State 179

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 . stmt

    '&'            shift, and go to state 53
    '-'            shift, and go to state 54
    '*'            shift, and go to state 55
    '!'            shift, and go to state 56
    INCOP          shift, and go to state 57
    DECOP          shift, and go to state 58
    '('            shift, and go to state 59
    WRITE_INT      shift, and go to state 60
    WRITE_STRING   shift, and go to state 61
    ID             shift, and go to state 62
    NULL_          shift, and go to state 63
    RETURN         shift, and go to state 64
    IF             shift, and go to state 65
    WHILE          shift, and go to state 66
    FOR            shift, and go to state 67
    BREAK          shift, and go to state 68
    CONTINUE       shift, and go to state 69
    STRING         shift, and go to state 70
    INTEGER_CONST  shift, and go to state 71
    CHAR_CONST     shift, and go to state 72
    ';'            shift, and go to state 73
    '{'            shift, and go to state 20

    compound_stmt  go to state 75
    stmt           go to state 180
    if_stmt        go to state 77
    expr           go to state 78
    or_expr        go to state 79
    or_list        go to state 80
    and_expr       go to state 81
    and_list       go to state 82
    binary         go to state 83
    unary          go to state 84


State 180

   55 stmt: FOR $@11 '(' expr_e ';' @12 expr_e ';' $@13 expr_e ')' $@14 stmt .

    $default  reduce using rule 55 (stmt)
